/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.City;
import Model.Community;
import Model.Doctor;
import Model.DoctorDirectory;
import Model.Hospital;
import Model.HospitalDirectory;
import Model.Patient;
import Model.Person;
import Model.PersonDirectory;
import Model.PatientDirectory;
import static java.lang.System.err;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class PersonPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonPanel
     */
    ArrayList<Person> person;
    ArrayList<Community> communities;
//    ArrayList<Hospital> allHospital;
    PersonDirectory personDir;
    PatientDirectory patientDir;
    DoctorDirectory docDir;
    HospitalDirectory hospitalDir;
    Person addPatient,addDoctor;
    City city;
    Community community;
//    Community communityName;
    
    public PersonPanel(PersonDirectory personDir, PatientDirectory patientDir,DoctorDirectory docDir,HospitalDirectory hospitalDir,City city,Community community) {
        initComponents();
        detailPanel.setVisible(false);
        jPanel1.setVisible(false);
        this.personDir = personDir;
        this.patientDir = patientDir;
        this.docDir = docDir;
        this.hospitalDir = hospitalDir;
        this.city = city;
        this.community = community;
        populatePersonTable();
//        loadCommunities();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        addPersonBtn = new javax.swing.JButton();
        detailPanel = new javax.swing.JPanel();
        cityLabel = new javax.swing.JLabel();
        phone = new javax.swing.JLabel();
        ageField = new javax.swing.JTextField();
        pincode = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        cityField = new javax.swing.JTextField();
        pincodeField = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        age = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        house = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        genderPanel = new javax.swing.JPanel();
        gender = new javax.swing.JLabel();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        error = new javax.swing.JLabel();
        cityField1 = new javax.swing.JTextField();
        cityLabel1 = new javax.swing.JLabel();
        updatePersonBtn = new javax.swing.JButton();
        deletePersonBtn = new javax.swing.JButton();
        addAsPatientBtn = new javax.swing.JButton();
        addAsDoctortBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        hospitalField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Historic", 1, 24)); // NOI18N
        jLabel1.setText("Person Directory");

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 204));

        personTable.setBackground(new java.awt.Color(204, 255, 204));
        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "Phone", "City", "Community", "House", "Pincode"
            }
        ));
        jScrollPane1.setViewportView(personTable);

        addPersonBtn.setBackground(new java.awt.Color(204, 255, 204));
        addPersonBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addPersonBtn.setText("Add a person");
        addPersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonBtnActionPerformed(evt);
            }
        });

        detailPanel.setBackground(new java.awt.Color(204, 255, 255));
        detailPanel.setPreferredSize(new java.awt.Dimension(385, 301));

        cityLabel.setText("City :");

        phone.setText("Phone :");

        ageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageFieldActionPerformed(evt);
            }
        });
        ageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ageFieldKeyReleased(evt);
            }
        });

        pincode.setText("Pincode :");

        name.setText("Name :");

        cityField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cityFieldKeyReleased(evt);
            }
        });

        pincodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pincodeFieldKeyReleased(evt);
            }
        });

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordKeyReleased(evt);
            }
        });

        phoneField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phoneFieldKeyReleased(evt);
            }
        });

        age.setText("Age :");

        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFieldKeyReleased(evt);
            }
        });

        house.setText("Password :");

        saveBtn.setBackground(new java.awt.Color(204, 255, 204));
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(204, 255, 204));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        genderPanel.setBackground(new java.awt.Color(204, 255, 255));

        gender.setText("Gender :");

        maleRadioButton.setText("Male");

        femaleRadioButton.setText("Female");

        javax.swing.GroupLayout genderPanelLayout = new javax.swing.GroupLayout(genderPanel);
        genderPanel.setLayout(genderPanelLayout);
        genderPanelLayout.setHorizontalGroup(
            genderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gender)
                .addGap(31, 31, 31)
                .addComponent(maleRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(femaleRadioButton)
                .addGap(15, 15, 15))
        );
        genderPanelLayout.setVerticalGroup(
            genderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genderPanelLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(genderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gender)
                    .addComponent(maleRadioButton)
                    .addComponent(femaleRadioButton))
                .addContainerGap())
        );

        cityField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cityField1KeyReleased(evt);
            }
        });

        cityLabel1.setText("Community:");

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailPanelLayout.createSequentialGroup()
                        .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createSequentialGroup()
                                .addGap(0, 48, Short.MAX_VALUE)
                                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pincodeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pincode)
                                    .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(detailPanelLayout.createSequentialGroup()
                                            .addComponent(house)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createSequentialGroup()
                                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cityLabel1)
                                                .addComponent(phone)
                                                .addComponent(cityLabel))
                                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(detailPanelLayout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(detailPanelLayout.createSequentialGroup()
                                                    .addGap(12, 12, 12)
                                                    .addComponent(phoneField))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailPanelLayout.createSequentialGroup()
                                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(age)
                                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ageField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addGap(18, 18, 18))
                    .addGroup(detailPanelLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(error)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveBtn)
                    .addComponent(updateBtn))
                .addContainerGap())
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel))
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(detailPanelLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(updateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                    .addGroup(detailPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityLabel1))
                        .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailPanelLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pincodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pincode)))
                            .addGroup(detailPanelLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(house)
                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(error))
                .addGap(14, 14, 14))
        );

        updatePersonBtn.setBackground(new java.awt.Color(204, 255, 204));
        updatePersonBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updatePersonBtn.setText("Update a person");
        updatePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonBtnActionPerformed(evt);
            }
        });

        deletePersonBtn.setBackground(new java.awt.Color(204, 255, 204));
        deletePersonBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deletePersonBtn.setText("Delete person");
        deletePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonBtnActionPerformed(evt);
            }
        });

        addAsPatientBtn.setBackground(new java.awt.Color(204, 255, 204));
        addAsPatientBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addAsPatientBtn.setText("Add as patient");
        addAsPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAsPatientBtnActionPerformed(evt);
            }
        });

        addAsDoctortBtn.setBackground(new java.awt.Color(204, 255, 204));
        addAsDoctortBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addAsDoctortBtn.setText("Add as doctor");
        addAsDoctortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAsDoctortBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        hospitalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter Hospital Name");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hospitalField)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(hospitalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(addPersonBtn)
                        .addGap(44, 44, 44)
                        .addComponent(updatePersonBtn)
                        .addGap(44, 44, 44)
                        .addComponent(deletePersonBtn)
                        .addGap(44, 44, 44)
                        .addComponent(addAsPatientBtn))
                    .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(addAsDoctortBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPersonBtn)
                    .addComponent(updatePersonBtn)
                    .addComponent(deletePersonBtn)
                    .addComponent(addAsPatientBtn)
                    .addComponent(addAsDoctortBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonBtnActionPerformed
        // TODO add your handling code here:
        detailPanel.setVisible(true);
        updateBtn.setVisible(false);
    }//GEN-LAST:event_addPersonBtnActionPerformed

    private void ageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageFieldActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        String name = nameField.getText();
        int age = Integer.parseInt(ageField.getText());
        String gender = "";
        if(maleRadioButton.isSelected())
        {
            gender="male";
        }
        else if(femaleRadioButton.isSelected())
        {
            gender="female";
        }
        Long phone = Long.parseLong(phoneField.getText());
        
        String cityName = cityField.getText();
        String communityName = cityField1.getText();
        
//        int selectedRowIndex = communityTable.getSelectedRow();
//        if(selectedRowIndex<0) {
//            JOptionPane.showMessageDialog(null, "Please select a community");
//        }
//        DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
//        Community selectedC = (Community) model.getValueAt(selectedRowIndex, 0);
//        String cName = selectedC.getCommunityName();
        String pswd = password.getText();
        int pincode = Integer.parseInt(pincodeField.getText());
        
        if((name.isEmpty() || name == null) && (pswd.isEmpty() || pswd == null)){
            JOptionPane.showMessageDialog(null, "Please enter all fields");
            return;
        }
        
        Person p = personDir.addNewPerson();
        p.setName(name);
        p.setAge(age);
        p.setGender(gender);
        p.setPhone(phone);
        p.setCity(city);
        p.setCommunity(community);
//        p.setCommunity(selectedC.getCommunityName());
        p.setPincode(pincode);
        p.setPassword(pswd);
        
        
        
        JOptionPane.showMessageDialog(null, "New person added");
        detailPanel.setVisible(false);
        nameField.setText("");
        ageField.setText("");
        maleRadioButton.setText("");
        phoneField.setText("");
        cityField.setText("");
        cityField1.setText("");
        password.setText("");
        pincodeField.setText("");
        populatePersonTable();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void updatePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonBtnActionPerformed
        // TODO add your handling code here:
        genderPanel.setVisible(false);
        detailPanel.setVisible(true);
        saveBtn.setVisible(false);
        updateBtn.setVisible(true);
        int selectedRowIndex = personTable.getSelectedRow();
        if(selectedRowIndex<0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        nameField.setText(selectedPerson.getName());
        ageField.setText(String.valueOf(selectedPerson.getAge()));
        phoneField.setText(String.valueOf(selectedPerson.getPhone()));
//        cityField.setText(selectedPerson.getCity());
        pincodeField.setText(String.valueOf(selectedPerson.getPincode()));
        
        
    }//GEN-LAST:event_updatePersonBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        String name = nameField.getText();
        int age = Integer.parseInt(ageField.getText());
        Long phone = Long.parseLong(phoneField.getText());
//        City cityName = cityField.getText();
//        Community communityName = communityField.getText();
        String house = password.getText();
        int pincode = Integer.parseInt(pincodeField.getText());
        
        
        if((name.isEmpty() || name == null) && (house.isEmpty() || house == null)){
            JOptionPane.showMessageDialog(null, "Please enter all fields");
            return;
        }
        
        int selectedRowIndex = personTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        selectedPerson.setName(nameField.getText());
        selectedPerson.setAge(Integer.parseInt(ageField.getText()));
        selectedPerson.setPhone(Long.parseLong(phoneField.getText()));
//        selectedPerson.setHouse(houseField.getText());
        selectedPerson.setPincode(Integer.parseInt(pincodeField.getText()));
        
        
        JOptionPane.showMessageDialog(null, "Person updated successfully");
        populatePersonTable();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deletePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        Person selectedPerson = (Person) model.getValueAt(selectedRowIndex, 0);
        personDir.deletePerson(selectedPerson);
        JOptionPane.showMessageDialog(null, "Person record deleted");
        populatePersonTable();
    }//GEN-LAST:event_deletePersonBtnActionPerformed

    private void addAsPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsPatientBtnActionPerformed
        // TODO add your handling code here:
        int selectedPerson = personTable.getSelectedRow();
        if (selectedPerson < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row you want to add as patient!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            addPatient=this.personDir.getPersonDir().get(selectedPerson);
            addPatient.setIsPatient(true);
            Patient patient=new Patient (addPatient);
            patientDir.addPatient(patient);
            JOptionPane.showMessageDialog(null, "Person added as patient");
            populatePersonTable();
            
        }
    }//GEN-LAST:event_addAsPatientBtnActionPerformed

    private void addAsDoctortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsDoctortBtnActionPerformed
        // TODO add your handling code here:
        jPanel1.setVisible(true);
        if(hospitalField.getText().equals("")){
        JOptionPane.showMessageDialog(null, "Please enter hospital name!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String hospital = null;
        for (Hospital h : hospitalDir.getHospitalDir()){
            if(hospitalField.getText().equals(h.getHospitalName())){
                hospital = h.getHospitalName();
            }
        }
        if(hospital == null ){
            JOptionPane.showMessageDialog(null, "Hospital does not exist");
        }
        
        
        }
        
        
        
    }//GEN-LAST:event_addAsDoctortBtnActionPerformed

    private void hospitalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_hospitalFieldActionPerformed

    private void nameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFieldKeyReleased
        // TODO add your handling code here:
        String Allowed="^[A-Z a-z]+$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(nameField.getText());
        if(!same.matches()){
            error.setText("Only Alphabets allowed.");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    
    }//GEN-LAST:event_nameFieldKeyReleased

    private void ageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageFieldKeyReleased
        // TODO add your handling code here:
        String Allowed="^[0-9]{1,2}$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(ageField.getText());
        if(!same.matches()){
            error.setText("Only Numbers allowed. Max 99");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_ageFieldKeyReleased

    private void phoneFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneFieldKeyReleased
        // TODO add your handling code here:
        String Allowed="^[0-9]{1,10}$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(phoneField.getText());
        if(!same.matches()){
            error.setText("Only 10 Numbers allowed");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_phoneFieldKeyReleased

    private void cityFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cityFieldKeyReleased
        // TODO add your handling code here:
        String Allowed="^[A-Z a-z]+$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(cityField.getText());
        if(!same.matches()){
            error.setText("Only Alphabets allowed.");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_cityFieldKeyReleased

    private void passwordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyReleased
        // TODO add your handling code here:
        String Allowed="^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(nameField.getText());
        if(!same.matches()){
            error.setText("Min 8 characters, at least 1 letter & 1 number.");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_passwordKeyReleased

    private void pincodeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pincodeFieldKeyReleased
        // TODO add your handling code here:
        String Allowed="^[0-9]{1,5}$";
        Pattern patt = Pattern.compile(Allowed);
        Matcher same = patt.matcher(ageField.getText());
        if(!same.matches()){
            error.setText("Only Numbers allowed. Max 5");
            saveBtn.setEnabled(false);
        }
        else{
            error.setText("");
            saveBtn.setEnabled(true);
        }
    }//GEN-LAST:event_pincodeFieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selcetedPerson =  personTable.getSelectedRow();
        if (selcetedPerson < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row you want to add as doctor!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            addDoctor=this.personDir.getPersonDir().get(selcetedPerson);
            int uniqueID=addDoctor.getPersonId();
            Doctor doc=new Doctor (addDoctor);
            doc.setHospitalName(hospitalField.getText());
            docDir.addDoctor(doc);
            JOptionPane.showMessageDialog(null, "Person added as doctor");
            populatePersonTable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cityField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cityField1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cityField1KeyReleased

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAsDoctortBtn;
    private javax.swing.JButton addAsPatientBtn;
    private javax.swing.JButton addPersonBtn;
    private javax.swing.JLabel age;
    private javax.swing.JTextField ageField;
    private javax.swing.JTextField cityField;
    private javax.swing.JTextField cityField1;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel cityLabel1;
    private javax.swing.JButton deletePersonBtn;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JLabel error;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JLabel gender;
    private javax.swing.JPanel genderPanel;
    private javax.swing.JTextField hospitalField;
    private javax.swing.JLabel house;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField password;
    private javax.swing.JTable personTable;
    private javax.swing.JLabel phone;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel pincode;
    private javax.swing.JTextField pincodeField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton updatePersonBtn;
    // End of variables declaration//GEN-END:variables

    private void populatePersonTable() {
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();
        model.setRowCount(0);
        
        for(Person p : personDir.getPersonDir()) {
            Object[] row = new Object[8];
            row[0]= p;
            row[1]= p.getAge();
            row[2]= p.getGender();
            row[3]= p.getPhone();
            row[4]= p.getCity();
            row[5]= p.getCommunity();
            row[6]= p.getResidence();
            row[7]= p.getPincode();
            
            model.addRow(row);
        }
    }

//    private void loadCommunities() {
//        DefaultTableModel md=(DefaultTableModel) communityTable.getModel();
//       md.setRowCount(0);
//       communities=this.city.getCommunities();
//       Object row[]= new Object[1];
//            for(Community c : communities)
//            {
//                row[0]=c.getCommunityName();
//                md.addRow(row);
//            }
//    }

}
